package ru.stimmax.ru.stimmax.lessons.lesson12.homework

import kotlin.collections.groupBy

fun main() {

    val numbers = listOf(-1, 2, -3, 4, 6, -5, 8, 264)
    val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
    val list = listOf(
    "Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы",
    "Люстра", "подушка", "Картина", "столик", "Вазон", "шторы", "Пуф", "книга",
    "Фоторамка", "светильник", "Коврик", "вешалка", "Подставка", "телевизор", "Комод",
    "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра", "пепельница", "Глобус",
    "статуэтка", "Поднос", "фигурка", "Ключница", "плед", "Тумба", "игрушка", "Настенные часы",
    "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья", "посуда", "Настольная лампа",
    "торшер", "Этажерка"
 )
    println("==================")
    println(numericCollectionCharacteristic(listOf()))
    println(numericCollectionCharacteristic(listOf(1, 2)))
    println(numericCollectionCharacteristic(listOf(0, 4, 5, 75, 37, 2)))
    println(numericCollectionCharacteristic(listOf(100, 4000, 5000, 8000, 700, 4987, 87657)))
    println(numericCollectionCharacteristic(listOf(10, 10, 10, 10, 10, 10, 10, 10, 10)))
    println(numericCollectionCharacteristic(listOf(10, 0, 40, 90, 500, 97, 87, 45, 36, 76)))
    println(numericCollectionCharacteristic(listOf(-100, -4000, -5000, -8000, -648, -9547, -7547)))
    println(numericCollectionCharacteristic(listOf(1001, 2000, 2000, 1234, 1965)))
    println(numericCollectionCharacteristic(listOf(100, 400, 500, 80, 6)))
    println(numericCollectionCharacteristic(listOf(9, 5, 3, 9, 10, 14)))
    println("==================")

//Задачи на приведение коллекции к значению
// 1. Проверить, что размер коллекции больше 5 элементов.
    if (numbers.size > 5) {
        println("Size is more than 5")
    } else {
        println("Size is less than 5")
    }

// 2. Проверить, что коллекция пустая
    if (numbers.isEmpty()) {
        println("Коллекция пуста")
    } else {
        println("В коллекции ${numbers.size} значений")
    }

// 3. Проверить, что коллекция не пустая.
    if (numbers.isNotEmpty()) {
        println("В коллекции ${numbers.size} значений")
    } else {
        println("Коллекция пуста")
    }

// 4. Взять элемент по индексу или создать значение если индекса не существует.
    println(numbers.getOrElse(40) {3920})

// 5. Собрать коллекцию в строку.
    println(numbers.joinToString("; "))

// 6. Посчитать сумму всех значений.
    println(numbers.sum())

// 7. Посчитать среднее.
    println(numbers.average())

// 8. Взять максимальное число.
    println(numbers.maxOrNull())

// 9. Взять минимальное число.
    println(numbers.minOrNull())

// 10. Взять первое число или null.
    println(numbers.firstOrNull())

// 11. Проверить что коллекция содержит элемент.
    println(numbers.contains(2984))


//Задачи на обработку коллекций.
// 12. Отфильтровать коллекцию по диапазону 18-30.
    val new1 = numbers.filter {it in 18..30}

// 13. Выбрать числа, которые не делятся на 2 и 3 одновременно
    val new2 = numbers.filterNot { it % 6 == 0  }

// 14. Очистить текстовую коллекцию от null элементов
    val new3 = numbers.filterNotNull()

// 15. Преобразовать текстовую коллекцию в коллекцию длин слов.
    val new4 = list.map { it.length }

// 16. Преобразовать текстовую коллекцию в мапу, где ключи - перевёрнутые слова, а значения - длина слов.
    val new5 = list.associate { it.reversed() to it.length }

// 17. Отсортировать список в алфавитном порядке.
    val new6 = list.sorted()

// 18. Взять первые 3 элемента списка.
    println(numbers.take(3))

// 19. Распечатать квадраты элементов списка.
    numbers.forEach { println(it * it) }

// 20. Группировать список по первой букве слов.
    val new7 = list.groupBy { it.first() }

// 21. Очистить список от дублей.
    val new8 = list.distinct()

// 22. Отсортировать список по убыванию.
    val new9 = numbers.sortedDescending()

// 23. Взять последние 3 элемента списка.
    println(list.takeLast(3))
}

//Задача 24. Характеристика числовой коллекции.
//Напиши функцию, которая принимает коллекцию чисел и возвращает строку с характеристикой коллекции,
// используя конструкцию when
//Если коллекция пустая - “Пусто”
//Если количество элементов меньше пяти - “Короткая”
//Если коллекция начинается с 0 - “Стартовая”
//Если сумма всех чисел больше 10000 - “Массивная”
//Если среднее значение равно 10 - “Сбалансированная”
//Если длина строки образованная склеиванием коллекции в строку равна 20 - “Клейкая”
//Если максимальное число меньше -10 - “Отрицательная”
//Если минимальное число больше 1000 - “Положительная”
//Если содержит одновременно числа 3 и 14 - “Пи***тая”
//Иначе - “Уникальная”
//Вызвать метод с данными, подходящими под каждую из веток
fun numericCollectionCharacteristic(arg: List<Int>): String {
    return when {
        arg.isEmpty() -> "Пусто"
        arg.size < 5 -> "Короткая"
        arg.first() == 0 -> "Стартовая"
        arg.sum() > 10000 -> "Массивная"
        arg.average() == 10.0 -> "Сбалансированная"
        arg.joinToString().length == 20 -> "Клейкая"
        arg.max() < -10 -> "Отрицательная"
        arg.min() > 1000 -> "Положительная"
        arg.containsAll(listOf(3, 14)) -> "Пи***тая"
        else -> "Уникальная"
    }
}

//Задача 25. Анализ учебных оценок.
//Напиши функцию, которая принимает список чисел и возвращает список чисел.
//Пример данных: val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
//Цель: Отфильтровать удовлетворительные оценки (>=60), отсортировать оставшиеся по возрастанию и взять первые 3.
// Вызывай методы обработки и фильтрации последовательно один из другого, чтобы результат предыдущего
// метода являлся основой для следующего.
fun analyzeGrades(arg: List<Int>): List<Int> {
    return arg.filter {it >= 60}
              .sorted()
              .take(3)
}

//Задача 26. Создание каталога по первой букве.
//Напиши функцию, которая принимает список строк и возвращает словарь с ключом - буквой и значением - строкой.
//Начальные значения: val list = listOf(
//    "Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы",
//    "Люстра", "подушка", "Картина", "столик", "Вазон", "шторы", "Пуф", "книга",
//    "Фоторамка", "светильник", "Коврик", "вешалка", "Подставка", "телевизор", "Комод",
//    "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра", "пепельница", "Глобус",
//    "статуэтка", "Поднос", "фигурка", "Ключница", "плед", "Тумба", "игрушка", "Настенные часы",
//    "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья", "посуда", "Настольная лампа",
//    "торшер", "Этажерка"
// )
//Цель: Привести все слова в списке к нижнему регистру, сгруппировать в каталог по первой букве используя метод groupBy
fun booksCatalog(arg: List<String>): Map<Char, List<String>> {
    return arg.map{it.lowercase()}.groupBy { it.first() }
}

//Задание 27. Подсчёт средней длины слов в списке.
//Напиши функцию, которая принимает список строк и возвращает строку.
//Начальные значения взять из предыдущей задачи.
//Цель: Перевести все слова в количество букв, подсчитать среднее значение.
// Вернуть форматированный текст с двумя знаками после запятой, используя функцию format и подходящий шаблон.
fun avgLength(arg: List<String>): String {
    return "%.2f".format(arg.map{ it.length }.average())
}

//Задание 28: Категоризация чисел.
//Напиши функцию, которая принимает список чисел и возвращает словарь с ключами - строками и значениями - числами.
//Начальные значения: val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
//Цель: Отобрать уникальные числа, отсортировать по убыванию и сгруппировать по четности (“четные” и “нечетные”).
fun oddEven(arg: List<Int>): Map<String, List<Int>> {
    return arg.distinct().sortedDescending().groupBy { if (it % 2 == 0) "четные" else "нечетные"}
}

//Задание 29: Поиск первого подходящего элемента.
//Напиши функцию, которая принимает список чисел и число и возвращает nullable число.
//Начальные значения: val ages = listOf(22, 18, 30, 45, 17, null, 60) и число для проверки возраста, например 18.
//Цель: Найти первый возраст в списке, который соответствует условию (больше второго аргумента) и вернуть его,
// либо null если значения не нашлось.
fun findFirst(arg: List<Int?>, age: Int): Int? {
    return arg.filterNotNull().firstOrNull { it > age}
}